/**
 * This class is generated by jOOQ
 */
package com.dozortsev.adviceexchange.domain.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Badge extends org.jooq.impl.TableImpl<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord> {

	private static final long serialVersionUID = 749571114;

	/**
	 * The singleton instance of <code>adviceexchange.badge</code>
	 */
	public static final com.dozortsev.adviceexchange.domain.jooq.tables.Badge BADGE = new com.dozortsev.adviceexchange.domain.jooq.tables.Badge();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord> getRecordType() {
		return com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord.class;
	}

	/**
	 * The column <code>adviceexchange.badge.bdg_id</code>.
	 */
	public final org.jooq.TableField<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord, java.lang.Integer> BDG_ID = createField("bdg_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>adviceexchange.badge.bdg_name</code>.
	 */
	public final org.jooq.TableField<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord, java.lang.String> BDG_NAME = createField("bdg_name", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

	/**
	 * The column <code>adviceexchange.badge.bdg_desc</code>.
	 */
	public final org.jooq.TableField<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord, java.lang.String> BDG_DESC = createField("bdg_desc", org.jooq.impl.SQLDataType.CLOB.length(65535).nullable(false), this, "");

	/**
	 * Create a <code>adviceexchange.badge</code> table reference
	 */
	public Badge() {
		this("badge", null);
	}

	/**
	 * Create an aliased <code>adviceexchange.badge</code> table reference
	 */
	public Badge(java.lang.String alias) {
		this(alias, com.dozortsev.adviceexchange.domain.jooq.tables.Badge.BADGE);
	}

	private Badge(java.lang.String alias, org.jooq.Table<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Badge(java.lang.String alias, org.jooq.Table<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, com.dozortsev.adviceexchange.domain.jooq.Adviceexchange.ADVICEEXCHANGE, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord, java.lang.Integer> getIdentity() {
		return com.dozortsev.adviceexchange.domain.jooq.Keys.IDENTITY_BADGE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord> getPrimaryKey() {
		return com.dozortsev.adviceexchange.domain.jooq.Keys.KEY_BADGE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<com.dozortsev.adviceexchange.domain.jooq.tables.records.BadgeRecord>>asList(com.dozortsev.adviceexchange.domain.jooq.Keys.KEY_BADGE_PRIMARY, com.dozortsev.adviceexchange.domain.jooq.Keys.KEY_BADGE_BDG_ID, com.dozortsev.adviceexchange.domain.jooq.Keys.KEY_BADGE_ID, com.dozortsev.adviceexchange.domain.jooq.Keys.KEY_BADGE_BDG_NAME);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public com.dozortsev.adviceexchange.domain.jooq.tables.Badge as(java.lang.String alias) {
		return new com.dozortsev.adviceexchange.domain.jooq.tables.Badge(alias, this);
	}

	/**
	 * Rename this table
	 */
	public com.dozortsev.adviceexchange.domain.jooq.tables.Badge rename(java.lang.String name) {
		return new com.dozortsev.adviceexchange.domain.jooq.tables.Badge(name, null);
	}
}
